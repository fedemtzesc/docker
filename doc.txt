1. Comando para mostrar todas las imagenes que tengo instaladas en mi contenedor docker:
	docker images

2. Comando para ver imagenes ejecutables que tengo instaladas:
	Para ver las que estan corriendo nadamas:
		docker ps
	Para ver las que estan corriendo y sin correr
		docker ps -a

3. Comando para instalar, correr y entrar a modo interactivo dentro de un sistema operativo
   Linux:
	docker run -it linux_mage
	
	ejemplos:
		docker run -it ubuntu
		docker run -it --name mi_deb debian bash 

	*** NOTA: Esto instalara una imagen de ubuntu, la ejecutara y nos metera en esta en 
		  modo interactivo como usuario de root.

4. Comando para ejecutar una imagen detenida de una distro de Linux y entrar a esta en modo 
   interactivo:
	docker start -i -a image_id
	docker start -ia image_id

5. Comando para descargar una imagen de dockerhub:
	docker pull image_name

6. Comandos para trabajar con python:
	a) Descargamos la imagen con docker pull python
	b) Instalamos y mandamos llamar una ejecucion dentro del IDLE de python con:
		docker run -it --name my_py python
	c) nos salimos del IDLE con exit() + ENTER
	d) Ahora abrimos en modo bash la imagen (como si estuvieramos en el server donde esta instalado):
		docker exec -it my_py bash
	  *** NOTA: Este comando solo funciona con el contenedor corriendo o ejecutandose

7. El comando inspect funciona tanto sobre una imagen o un contenedor y nos retorna
   un archivo json con informacion del elemento a inspeccionar. La sintaxis de este
   comando es la siguiente:
	a) Para inspeccionar una imagen:
		docker inspect [image_id | image_name]
	b) Para inspeccionar un contenedor:
		docker inspect [container_id | container_name]

8. Como entrar en modo interactivo (modo bash) dentro de un contenedor:
	a) Primeramente iniciamos el contenedor si es que no esta levantado:
		docker start image_id
	b) Luego procedemos a entrar en modo interactivo
		docker exec -it image_id bash
	   *** NOTA: En esta modalidad, si nos salimos con exit, no se cae el contenedor, sigue corriendo.

9. 	Comando para eliminar una imagen:
		docker rmi id_image

10.	Comando para eliminar un contenedor:
		docker rm id_image

		*** NOTA: EL contenedor tiene que estar detenido para poder eliminarlo.

11. Comando para detener un contenedor:
		docker stop id_image
	
12. Detener todos los contenedores que estan corriendo:
	docker stop $(docker ps -a -q) 

13. Eliminar todos los contenedores
	docker rm $(docker ps -a -q)

14. Eliminar todas las imagenes de golpe
	docker rmi --force $(docker images -a -q)

15. Para crear imagenes propias de nuestros proyectos:
	a) Dentro de nuestro proyecto creamos dos archivos:
		i)Dockerfile .- Para guardar las instrucciones de instalacion de nuestra aplicacion
		ii) .dockerignore .- Para definir que archivos no se van con el proyecto de la aplicacion

	b) Una vez terminado de crear y configurar el archivo Dockerfile ejemcutamos el siguiente comando
	   para crear la imagen de nuestro proyecto:
		docker build --tag nombre_de_nuestra_imagen_nueva .
	   una vez que damos enter empezara el proceso de creacion de nuestra imagen

	c) Si la creacion de la imagen termina sin errores, podemos proceder a verificar si nuestra imagen
	   fue creada ejecutando el siguiente comando en el bash:
		docker images
	   Si nuestra imagen fue creada con exito, aparecera en la lista de imagenes de docker que tenemos
	   instaladas en nuestro equipo.

